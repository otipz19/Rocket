using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.CompilerServices;

namespace func_rocket
{
	public class LevelsTask
	{
		static readonly Physics standardPhysics = new Physics();
        private static readonly Vector standardTargetLocation = new Vector(600, 200);
		private static readonly Vector standardRocketLocation = new Vector(200, 500);

		private static Vector WhiteHoleGravity(Size size, Vector location)
		{
			Vector fromTargetToRocket = location - new Vector(600, 200);
			return fromTargetToRocket.Normalize() * (140 * fromTargetToRocket.Length) / (Math.Pow(fromTargetToRocket.Length, 2) + 1);
		}

		private static Vector BlackHoleGravity(Size size, Vector location)
		{
            Vector anomalyPos = new Vector(400, 350);
            Vector fromRocketToAnomaly = anomalyPos - location;
            return fromRocketToAnomaly.Normalize() * (300 * fromRocketToAnomaly.Length / (Math.Pow(fromRocketToAnomaly.Length, 2) + 1));
        }

        public static IEnumerable<Level> CreateLevels()
		{
			yield return new Level("Zero", 
				new Rocket(new Vector(200, 500), Vector.Zero, -0.5 * Math.PI),
                new Vector(600, 200), 
				(size, location) => Vector.Zero,
				standardPhysics);
			yield return new Level("Heavy",
				new Rocket(new Vector(200, 500), Vector.Zero, -0.5 * Math.PI),
                new Vector(600, 200),
				(size, location) => new Vector(0, 0.9),
				standardPhysics);
			yield return new Level("Up",
				new Rocket(new Vector(200, 500), Vector.Zero, -0.5 * Math.PI),
				new Vector(700, 500),
				(size, location) => new Vector(0, -1) * 300 / (size.Height - location.Y + 300),
				standardPhysics);
			yield return new Level("WhiteHole",
				new Rocket(new Vector(200, 500), Vector.Zero, -0.5 * Math.PI),
                new Vector(600, 200),
				WhiteHoleGravity,
				standardPhysics);
			yield return new Level("BlackHole",
				new Rocket(new Vector(200, 500), Vector.Zero, -0.5 * Math.PI),
                new Vector(600, 200),
                BlackHoleGravity,
				standardPhysics);
			yield return new Level("BlackAndWhite",
				new Rocket(new Vector(200, 500), Vector.Zero, -0.5 * Math.PI),
                new Vector(600, 200),
				(size, location) => (WhiteHoleGravity(size, location) + BlackHoleGravity(size, location)) / 2,
				standardPhysics);
        }
	}
}